{
  "version": 3,
  "sources": [
    "service_edit_fields_modal_ctrl.es6"
  ],
  "names": [],
  "mappings": "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",
  "file": "service_edit_fields_modal_ctrl.js",
  "sourcesContent": [
    "class ServiceFieldsEditModalControl {\r\n    constructor($scope, $modalInstance, $filter, $http, $timeout, $interval, $window, shareDataService, dataTableUtils, objectUtils, toasterUtils) {\r\n\r\n        const FIELD_TYPE_SELECT_BOX_ID = 4;\r\n        const DATA_TYPE_SELECT_BOX_ID = 5;\r\n\r\n        // language=HTML\r\n        let operationsHtml = '<a class=\"fa fa-arrow-up\" style=\"padding-right: 15px;\"/><a class=\"fa fa-arrow-down\" style=\"padding-right: 15px;\"/><a class=\"fa fa-times\"/>';\r\n\r\n        $scope.regexCharactersOnly = shareDataService.common.getCharactersOnlyRegex();\r\n\r\n        $scope.selectedRowItems = shareDataService.common.getSelectedRowItems();\r\n\r\n        $scope.language = localStorage.getItem('NG_TRANSLATE_LANG_KEY');\r\n\r\n        $scope.fieldTypes = undefined;\r\n        $scope.dataTypes = undefined;\r\n        $scope.svcFields = undefined;\r\n\r\n        $scope.selectedFieldType = {};\r\n        $scope.selectedDataType = {};\r\n        $scope.selectedSvcField = {};\r\n\r\n        $scope.svcName = undefined;\r\n\r\n        $scope.isEditing = false;\r\n\r\n        $scope.fields = {\r\n            'svcId'               : undefined,\r\n            'svcName'             : undefined,\r\n            'fieldId'             : undefined,\r\n            'fieldName'           : undefined,\r\n            'fieldIOType'         : undefined,\r\n            'fieldType'           : undefined,\r\n            'fieldLength'         : undefined,\r\n            'fieldOrder'          : undefined,\r\n            'fieldDescriptionZhCn': undefined,\r\n            'fieldDescriptionEn'  : undefined,\r\n            'fieldOperatorId'     : sessionStorage.getItem('userId')\r\n        };\r\n\r\n        $scope.alerts = [\r\n            // { type: 'danger', msg: '' }\r\n        ];\r\n\r\n        $scope.isFormDisabled = false;\r\n\r\n        $scope.dataTableParms = {\r\n            searching : false, // Disable built-in searching\r\n            serverSide: true, // Enables the server-side processing\r\n            processing: true, // Enables the \"Processing...\" indicator\r\n            autoWidth : false, // Disable column width auto determining\r\n            pagingType: 'full_numbers',　// Paging buttons contains \"First\", \"Last\", \"Previous\", \"Next\", and numbers\r\n            language  : {\r\n                // I18n options, see https://datatables.net/reference/option/ for details\r\n                paginate    : {\r\n                    previous: $filter('translate')('pages.common.COMMON_BUTTONS.COMMON_BUTTON_PREV_PAGE'),\r\n                    next    : $filter('translate')('pages.common.COMMON_BUTTONS.COMMON_BUTTON_NEXT_PAGE'),\r\n                    first   : $filter('translate')('pages.common.COMMON_BUTTONS.COMMON_BUTTON_FIRST_PAGE'),\r\n                    last    : $filter('translate')('pages.common.COMMON_BUTTONS.COMMON_BUTTON_LAST_PAGE')\r\n                },\r\n                emptyTable  : $filter('translate')('pages.common.COMMON_NOTIFICATION_TEXTS.COMMON_NOTIFICATION_EMPTY_TABLE'),\r\n                info        : $filter('translate')('pages.common.COMMON_NOTIFICATION_TEXTS.COMMON_NOTIFICATION_PAGE_INFO'),\r\n                infoFiltered: $filter('translate')('pages.common.COMMON_NOTIFICATION_TEXTS.COMMON_NOTIFICATION_PAGE_INFO_FILTERED'),\r\n                infoEmpty   : $filter('translate')('pages.common.COMMON_NOTIFICATION_TEXTS.COMMON_NOTIFICATION_PAGE_EMPTY'),\r\n                lengthMenu  : $filter('translate')('pages.common.COMMON_FIELDS.COMMON_FIELD_LENGTH_MENU'),\r\n                processing  : $filter('translate')('pages.common.COMMON_NOTIFICATION_TEXTS.COMMON_NOTIFICATION_PROCESSING')\r\n            },\r\n            ajax      : {\r\n                url    : CLB_FRONT_BASE_URL + 'svc/querySvcFieldInfo',\r\n                data   : {\r\n                    'svcId': $scope.selectedRowItems.svcId\r\n                },\r\n                dataSrc: 'data',\r\n                type   : 'POST'\r\n            },\r\n            columns   : [\r\n                {data: 'seq', visible: true},\r\n                {data: 'svcId', visible: false},\r\n                {data: 'svcName', visible: true},\r\n                {data: 'fieldId', visible: false},\r\n                {data: 'fieldName', visible: true},\r\n                {data: 'fieldIOType', visible: false},\r\n                {data: 'fieldIOTypeDesc', visible: true},\r\n                {data: 'fieldType', visible: true},\r\n                {data: 'fieldLength', visible: true},\r\n                {data: 'fieldOrder', visible: false, sortable: false}\r\n            ],\r\n            columnDefs: [{\r\n                targets       : 10,\r\n                data          : null,\r\n                defaultContent: operationsHtml\r\n            }],\r\n            order     : [[0, 'asc']]\r\n        };\r\n\r\n        /**\r\n         * Generates the child row for the selected row\r\n         * @param data Data of the selected row\r\n         * @returns {string} The HTML of the child row\r\n         */\r\n        function formatChildRow(data) {\r\n            return '<div class=\"col-lg-6 form-group\">'\r\n                + '<h5>' + $filter('translate')('pages.sm.service.SERVICE_MGMT_COLUMN_TITLES.SERVICE_MGMT_COLUMN_TITLE_DESCRIPTION_ZH_CN') + '</h5>'\r\n                + '<div id=\"descZhCn\" class=\"well b bg-light lter wrapper-sm\">'\r\n                + data.fieldDescriptionZhCn\r\n                + '</div>'\r\n                + '</div>'\r\n                + '<div class=\"col-lg-6 form-group\">'\r\n                + '<h5>' + $filter('translate')('pages.sm.service.SERVICE_MGMT_COLUMN_TITLES.SERVICE_MGMT_COLUMN_TITLE_DESCRIPTION_EN') + '</h5>'\r\n                + '<div id=\"descEn\" class=\"well b bg-light lter wrapper-sm\">'\r\n                + data.fieldDescriptionEn\r\n                + '</div>'\r\n                + '</div>';\r\n        }\r\n\r\n        /**\r\n         * Handles how data is displayed when a row is selected\r\n         * When data contains something, then we assume a row has been selected.\r\n         * And when data is null or undefined, we assume the user performed a de-select.\r\n         * @param data Data of the selected row.\r\n         */\r\n        function selectRowHandler(data) {\r\n            if (data) {\r\n                $scope.fields = Object.assign({}, data);\r\n                $scope.selectedFieldType.key = String($scope.fields.fieldIOType);\r\n                $scope.selectedDataType.item = objectUtils.getPropertyByValue($scope.dataTypes, $scope.fields.fieldType, 'value');\r\n                $scope.selectedSvcField.order = objectUtils.getPropertyByValue($scope.svcFields, $scope.fields.fieldOrder, 'fieldOrder');\r\n                $scope.isEditing = true;\r\n            } else {\r\n                $scope.fields.svcId = undefined;\r\n                $scope.fields.svcName = undefined;\r\n                $scope.fields.fieldId = undefined;\r\n                $scope.fields.fieldName = undefined;\r\n                $scope.fields.fieldIOType = undefined;\r\n                $scope.fields.fieldIOTypeDes = undefined;\r\n                $scope.fields.fieldType = undefined;\r\n                $scope.fields.fieldLength = undefined;\r\n                $scope.fields.fieldOrder = undefined;\r\n                $scope.fields.fieldDescriptionZhCn = undefined;\r\n                $scope.fields.fieldDescriptionEn = undefined;\r\n                $scope.selectedFieldType.key = undefined;\r\n                $scope.selectedDataType.item = undefined;\r\n                $scope.selectedSvcField.order = undefined;\r\n                $scope.isEditing = false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Alert when operation is successful\r\n         * @param type Type of the alert, add, edit, delete, or other\r\n         * @param message Message for the alert box when the box type is other\r\n         */\r\n        function addSuccessAlert(type, message) {\r\n            switch (type) {\r\n                case 'add':\r\n                    $scope.alerts.push({\r\n                        type: 'success',\r\n                        msg : $filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_SERVICE_ADD_SUCCESSFUL')\r\n                    });\r\n                    break;\r\n                case 'edit':\r\n                    $scope.alerts.push({\r\n                        type: 'success',\r\n                        msg : $filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_SERVICE_FIELD_EDIT_SUCCESSFUL')\r\n                    });\r\n                    break;\r\n                case 'delete':\r\n                    $scope.alerts.push({\r\n                        type: 'success',\r\n                        msg : $filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_SERVICE_FIELD_DELETE_SUCCESSFUL')\r\n                    });\r\n                    break;\r\n                case 'other':\r\n                    $scope.alerts.push({\r\n                        type: 'success',\r\n                        msg : message\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Adding red alert box\r\n         * @param {string} message The message\r\n         */\r\n        function addFailAlert(message) {\r\n            $scope.alerts.push({\r\n                type: 'danger',\r\n                msg : message\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Close the alert\r\n         * @param index Index of the alert\r\n         */\r\n        $scope.closeAlert = (index) => {\r\n            $scope.alerts.splice(index, 1);\r\n        };\r\n\r\n        /**\r\n         * Check if the field being inserted is unique\r\n         * @param _fieldName Name of the field being inserted\r\n         * @returns {boolean} True if the field name is NOT unique, otherwise false\r\n         */\r\n        function chkIsFieldNameUnique(_fieldName) {\r\n            const DATA_TYPE_STRING = 'STRING';\r\n            const DATA_TYPE_LIST = 'LIST';\r\n\r\n            let data = $('#tblServiceFields').DataTable().rows().data();\r\n\r\n            for (let item in data) {\r\n                if (data.hasOwnProperty(item) && data[item].fieldType === DATA_TYPE_STRING && data[item].fieldName === _fieldName) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function moveFieldPosition(fieldId, fieldOrder, svcId) {\r\n            $http({\r\n                method: 'POST',\r\n                url   : CLB_FRONT_BASE_URL + 'svc/editSvcFieldOrder',\r\n                params: {\r\n                    fieldId        : fieldId,\r\n                    fieldOrder     : fieldOrder,\r\n                    fieldOperatorId: sessionStorage.getItem('userId'),\r\n                    svcId          : svcId\r\n                }\r\n            }).then((response) => {\r\n                if (response.data.flag === 'success') {\r\n                    dataTableUtils.reloadDataTable($('#tblServiceFields'));\r\n                } else {\r\n\r\n                }\r\n            }, () => {\r\n                toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_NETWORK_FAILED'));\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Fetch the list of field types such as input field, output field, and I/O field\r\n         * @property responseData The data part of the response\r\n         * @property responseData.optValueList[] Items inside the specified option\r\n         * @property responseData.optValueList[].key Key of the option item\r\n         * @property responseData.optValueList[].value Value of the option\r\n         */\r\n        function fetchFieldTypes() {\r\n            $http({\r\n                method: 'POST',\r\n                url   : CLB_FRONT_BASE_URL + 'select/queryOptValueWithFilter',\r\n                params: {\r\n                    optId: FIELD_TYPE_SELECT_BOX_ID\r\n                }\r\n            }).then((response) => {\r\n                let responseData = response.data;\r\n\r\n                if (responseData.flag === 'success') {\r\n                    $scope.fieldTypes = responseData.optValueList;\r\n                }\r\n            }, () => {\r\n                toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_NETWORK_FAILED'));\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Fetch the list of data types, like STRING or LIST\r\n         */\r\n        function fetchDataTypes() {\r\n            $http({\r\n                method: 'POST',\r\n                url   : CLB_FRONT_BASE_URL + 'select/queryOptValueWithFilter',\r\n                params: {\r\n                    optId: DATA_TYPE_SELECT_BOX_ID\r\n                }\r\n            }).then((response) => {\r\n                let responseData = response.data;\r\n\r\n                if (responseData.flag === 'success') {\r\n                    $scope.dataTypes = responseData.optValueList;\r\n                }\r\n            }, () => {\r\n                toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_NETWORK_FAILED'));\r\n            });\r\n        }\r\n\r\n        function fetchFieldsForSelectBox() {\r\n            $http({\r\n                method: 'POST',\r\n                url   : CLB_FRONT_BASE_URL + 'select/querysvcFieldsName',\r\n                params: {\r\n                    svcId: $scope.selectedRowItems.svcId\r\n                }\r\n            }).then((response) => {\r\n                let responseData = response.data;\r\n\r\n                if (responseData.flag === 'success') {\r\n                    $scope.svcFields = responseData['svcFieldsName'];\r\n                } else {\r\n                    $scope.svcFields = [];\r\n                }\r\n\r\n                $scope.svcFields.push({\r\n                    svcId     : -1,\r\n                    fieldOrder: 'last',\r\n                    fieldName : $filter('translate')('pages.sm.service.SERVCE_MGMT_SELECT_ITEMS.SERVICE_MGMT_SELECT_ITEM_POSITION_LAST')\r\n                });\r\n\r\n                if ($scope.svcFields.length === 1) {\r\n                    $scope.selectedSvcField.order = $scope.svcFields[0].fieldOrder;\r\n                    $scope.fields.fieldOrder = $scope.svcFields[0].fieldOrder;\r\n                }\r\n            }, () => {\r\n                toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_NETWORK_FAILED'));\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Perform the initialization AJAXes\r\n         */\r\n        function performInitAjaxes() {\r\n            fetchFieldTypes();\r\n            fetchDataTypes();\r\n            fetchFieldsForSelectBox();\r\n        }\r\n\r\n        /**\r\n         * Add fields\r\n         */\r\n        $scope.addField = (form) => {\r\n            $scope.alerts = [];\r\n\r\n            $scope.isFormDisabled = true;\r\n\r\n            if (chkIsFieldNameUnique($scope.fields.fieldName)) {\r\n                addFailAlert($filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_DUPLICATE_FIELD_NAME'));\r\n                $scope.isFormDisabled = false;\r\n                return;\r\n            }\r\n\r\n            $http({\r\n                method: 'POST',\r\n                url   : CLB_FRONT_BASE_URL + 'svc/addNewSvcFieldWithOne',\r\n                params: {\r\n                    'svcId'                                  : $scope.fields.svcId,\r\n                    'svcFieldRequiredVo.svcName'             : $scope.fields.svcName,\r\n                    'svcFieldRequiredVo.fieldName'           : $scope.fields.fieldName,\r\n                    'svcFieldRequiredVo.fieldType'           : $scope.fields.fieldType,\r\n                    'svcFieldRequiredVo.fieldLength'         : $scope.fields.fieldLength,\r\n                    'svcFieldRequiredVo.fieldIOType'         : $scope.fields.fieldIOType,\r\n                    'svcFieldRequiredVo.fieldDescriptionZhCn': $scope.fields.fieldDescriptionZhCn,\r\n                    'svcFieldRequiredVo.fieldDescriptionEn'  : $scope.fields.fieldDescriptionEn,\r\n                    'svcFieldRequiredVo.fieldOrder'          : $scope.fields.fieldOrder,\r\n                    'svcFieldRequiredVo.fieldOperatorId'     : sessionStorage.getItem('userId')\r\n                }\r\n            }).then((response) => {\r\n                if (response.data.flag === 'success') {\r\n                    addSuccessAlert('add');\r\n\r\n                    $scope.isFormDisabled = false;\r\n\r\n                    dataTableUtils.reloadDataTable($('#tblServiceFields'));\r\n\r\n                    fetchFieldsForSelectBox();\r\n\r\n                    selectRowHandler();\r\n                    form.$setPristine();\r\n                    form.$setValidity();\r\n                } else {\r\n                    $scope.isFormDisabled = false;\r\n\r\n                    let message = '';\r\n                    if ($scope.language === 'zh_CN') {\r\n                        message = response.data['messageZhCn'];\r\n                    } else if ($scope.language === 'en') {\r\n                        message = response.data['messageEn'];\r\n                    }\r\n\r\n                    addFailAlert(message ? message : $filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_SERVICE_FIELD_ADD_FAILED'));\r\n                }\r\n            }, () => {\r\n                return false;\r\n            });\r\n        };\r\n\r\n        $scope.editField = (form) => {\r\n            $scope.alerts = [];\r\n\r\n            $http({\r\n                method: 'POST',\r\n                url   : CLB_FRONT_BASE_URL + 'svc/editSvcField',\r\n                params: {\r\n                    'fieldId'                                : $scope.fields.fieldId,\r\n                    'isEdited'                               : form.$dirty,\r\n                    'svcId'                                  : $scope.fields.svcId,\r\n                    'svcFieldRequiredVo.svcName'             : $scope.fields.svcName,\r\n                    'svcFieldRequiredVo.fieldName'           : $scope.fields.fieldName,\r\n                    'svcFieldRequiredVo.fieldType'           : $scope.fields.fieldType,\r\n                    'svcFieldRequiredVo.fieldLength'         : $scope.fields.fieldLength,\r\n                    'svcFieldRequiredVo.fieldIOType'         : $scope.fields.fieldIOType,\r\n                    'svcFieldRequiredVo.fieldDescriptionZhCn': $scope.fields.fieldDescriptionZhCn,\r\n                    'svcFieldRequiredVo.fieldDescriptionEn'  : $scope.fields.fieldDescriptionEn,\r\n                    'svcFieldRequiredVo.fieldOrder'          : $scope.fields.fieldOrder,\r\n                    'svcFieldRequiredVo.fieldOperatorId'     : sessionStorage.getItem('userId')\r\n                }\r\n            }).then((response) => {\r\n                let responseData = response.data;\r\n\r\n                if (responseData.flag === 'success') {\r\n                    addSuccessAlert('edit');\r\n                    dataTableUtils.reloadDataTable($('#tblServiceFields'));\r\n                    // Clear fields by \"unselecting\"\r\n                    selectRowHandler();\r\n                    // Then reset its validation state\r\n                    form.$setPristine();\r\n                    form.$setValidity();\r\n                } else {\r\n                    if ($scope.language === 'zh_CN') {\r\n                        addFailAlert(responseData['messageZhCn']);\r\n                    } else {\r\n                        addFailAlert(responseData['messageEn']);\r\n                    }\r\n\r\n                }\r\n            }, () => {\r\n                toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_NETWORK_FAILED'));\r\n            });\r\n        };\r\n\r\n        /**\r\n         * When the field type select box changed\r\n         */\r\n        $scope.fieldTypeSelectOnChange = () => {\r\n            $scope.fields.fieldIOType = $scope.selectedFieldType.key;\r\n        };\r\n\r\n        /**\r\n         * When the data type select box changed\r\n         */\r\n        $scope.dataTypeSelectOnChange = () => {\r\n            $scope.fields.fieldType = $scope.selectedDataType.item.value;\r\n        };\r\n\r\n        $scope.svcFieldSelectOnChange = () => {\r\n            $scope.fields.fieldOrder = $scope.selectedSvcField.order;\r\n        };\r\n\r\n        // Close modal\r\n        $scope.cancel = () => {\r\n            $modalInstance.dismiss('cancel');\r\n        };\r\n\r\n        angular.element(() => {\r\n            performInitAjaxes();\r\n\r\n            $scope.fields.svcId = $scope.selectedRowItems.svcId;\r\n            $scope.fields.svcName = $scope.selectedRowItems.svcName;\r\n\r\n            $timeout(() => {\r\n                let table = $('#tblServiceFields');\r\n                dataTableUtils.enableSingleSelect(table, true, formatChildRow, selectRowHandler);\r\n\r\n                let dataTable;\r\n\r\n                let intervalTask = $interval(() => {\r\n                    if ($.fn.dataTable.isDataTable(table)) {\r\n                        dataTable = table.DataTable();\r\n                        $interval.cancel(intervalTask);\r\n                    }\r\n                }, 100);\r\n\r\n                // Move upwards\r\n                table.find('tbody').on('click', 'a.fa-arrow-up', function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    $scope.alerts = [];\r\n\r\n                    let previousRow = $(this).parents('tr').prev();\r\n\r\n                    if (previousRow.length !== 0) {\r\n                        let data = dataTable.row($(this).parents('tr')).data();\r\n                        let previousRowData = dataTable.row($(this).parents('tr').prev()).data();\r\n\r\n                        let svcId = data.svcId;\r\n                        let fieldId = data.fieldId;\r\n                        let fieldOrder = previousRowData.fieldOrder;\r\n\r\n                        moveFieldPosition(fieldId, fieldOrder, svcId);\r\n                    } else {\r\n                        $timeout(() => {\r\n                            addFailAlert($filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_CANNOT_MOVE_UPWARD'));\r\n                        }, 0);\r\n\r\n                    }\r\n                });\r\n\r\n                // Move downwards\r\n                table.find('tbody').on('click', 'a.fa-arrow-down', function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    $scope.alerts = [];\r\n\r\n                    let nextRow = $(this).parents('tr').next();\r\n\r\n                    if (nextRow.length !== 0) {\r\n\r\n                        let data = dataTable.row($(this).parents('tr')).data();\r\n\r\n                        let nextNextRow = nextRow.next();\r\n                        if (nextNextRow.length !== 0) {\r\n                            // If there is a row below its next row\r\n                            // Get that row's order number\r\n                            // and move\r\n\r\n                            let targetData = dataTable.row(nextNextRow).data();\r\n\r\n                            let fieldId = data.fieldId;\r\n                            let fieldOrder = targetData.fieldOrder;\r\n                            let svcId = data.svcId;\r\n\r\n                            moveFieldPosition(fieldId, fieldOrder, svcId);\r\n                        } else {\r\n                            // If there is nothing below its next row\r\n                            // Move this row to the \"last\" position\r\n\r\n                            let fieldId = data.fieldId;\r\n                            let fieldOrder = 'last';\r\n                            let svcId = data.svcId;\r\n\r\n                            moveFieldPosition(fieldId, fieldOrder, svcId);\r\n                        }\r\n                    } else {\r\n                        $timeout(() => {\r\n                            addFailAlert($filter('translate')('pages.sm.service.SERVICE_MGMT_ALERTS.SERVICE_MGMT_ALERT_CANNOT_MOVE_DOWNWARD'));\r\n                        }, 0);\r\n                    }\r\n                });\r\n\r\n                // Delete\r\n                table.find('tbody').on('click', 'a.fa-times', function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    $scope.alerts = [];\r\n\r\n                    let confirmDelete = $window.confirm($filter('translate')('pages.sm.service.SERVICE_MGMT_NOTIFICATIONS.SERVICE_MGMT_NOTIFICATION_DELETE_FIELD_CONFIRMATION'));\r\n\r\n                    if (confirmDelete) {\r\n                        let data = dataTable.row($(this).parents('tr')).data();\r\n\r\n                        $http({\r\n                            method: 'POST',\r\n                            url   : CLB_FRONT_BASE_URL + 'svc/deleteSvcFieldInfo',\r\n                            params: {\r\n                                'fieldId'                           : data.fieldId,\r\n                                'svcFieldRequiredVo.fieldOperatorId': sessionStorage.getItem('userId')\r\n                            }\r\n                        }).then((response) => {\r\n                            let responseData = response.data;\r\n\r\n                            if (responseData.flag === 'success') {\r\n                                addSuccessAlert('delete');\r\n                                dataTableUtils.reloadDataTable($('#tblServiceFields'));\r\n                                fetchFieldsForSelectBox();\r\n                            } else {\r\n                                if ($scope.language === 'zh_CN') {\r\n                                    addFailAlert(responseData['messageZhCn']);\r\n                                } else {\r\n                                    addFailAlert(responseData['messageEn']);\r\n                                }\r\n\r\n                            }\r\n                        }, () => {\r\n                            toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_NETWORK_FAILED'));\r\n                        });\r\n                    }\r\n                });\r\n\r\n            }, 0);\r\n\r\n        });\r\n    }\r\n}\r\n\r\nclass EditServiceFieldsModalInstanceCtrl {\r\n    constructor($scope, $modal, $filter, shareDataService, toasterUtils) {\r\n        $scope.showEditServiceFieldsPopup = () => {\r\n\r\n            let table = $('#tblServices').DataTable();\r\n\r\n            if (table.row('.active').length === 1) {\r\n                shareDataService.common.setSelectedRowItems(table.row('.active').data());\r\n\r\n                $modal.open({\r\n                    backdrop   : 'static',\r\n                    templateUrl: 'editServiceFieldsModal.html',\r\n                    controller : 'ServiceFieldsEditModalControl',\r\n                    size       : 'lg'\r\n                });\r\n            } else {\r\n                toasterUtils.showErrorToaster($filter('translate')('pages.common.COMMON_TOAST_TEXTS.COMMON_TOAST_TEXT_SELECT_ROW'));\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\napp.controller('EditServiceFieldsModalInstanceCtrl', EditServiceFieldsModalInstanceCtrl);\r\napp.controller('ServiceFieldsEditModalControl', ServiceFieldsEditModalControl);"
  ]
}